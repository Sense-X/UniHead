num_classes: &num_classes 1000
random_resized_crop: &random_resized_crop
  type: torch_random_resized_crop
  kwargs:
    size: 224
    scale: [0.08, 1]

random_horizontal_flip: &random_horizontal_flip
  type: torch_random_horizontal_flip

pil_color_jitter:
  type: torch_color_jitter
  kwargs:
    brightness: 0.2
    contrast: 0.2
    saturation: 0.2
    hue: 0.1

center_crop: &center_crop
  type: torch_center_crop
  kwargs:
    size: 224

torch_size: &torch_resize
  type: torch_resize
  kwargs:
    size: 256

to_tensor: &to_tensor
  type: to_tensor

normalize: &normalize
  type: normalize
  kwargs:
    mean: [0.485, 0.456, 0.406] # ImageNet pretrained statics
    std: [0.229, 0.224, 0.225]

dataset: # Required.
  train:
    dataset:
      type: cls
      kwargs:
        meta_file: images/meta/train.txt
        image_reader:
          type: fs_pillow
          kwargs:
            image_dir: images/train
            color_mode: RGB
            memcached: false
        transformer: [*random_resized_crop, *random_horizontal_flip, *to_tensor, *normalize]
    batch_sampler:
      type: base
      kwargs:
        sampler:
          type: dist
          kwargs: {}
        batch_size: 64
    dataloader:
      type: cls_base
      kwargs:
        num_workers: 12
        pin_memory: true
        batch_fn:
          type: batch_mixup
          kwargs:
            alpha: 0.2
            num_classes: *num_classes
  test:
    dataset:
      type: cls
      kwargs:
        meta_file: images/meta/val.txt
        image_reader:
          type: fs_pillow
          kwargs:
            image_dir: images/val
            color_mode: RGB
            memcached: false
        transformer: [*torch_resize, *center_crop, *to_tensor, *normalize]
        evaluator:
          type: imagenet               # choices = {'COCO', 'VOC', 'MR'}
          kwargs:
            topk: [1, 5]
    batch_sampler:
      type: base
      kwargs:
        sampler:
          type: dist
          kwargs: {}
        batch_size: 64
    dataloader:
      type: cls_base
      kwargs:
        num_workers: 8
        pin_memory: false

trainer: # Required.
  max_epoch: 180
  test_freq: 5
  save_freq: 5
  only_save_latest: true
  optimizer:                 # optimizer = SGD(params,lr=0.001,momentum=0.9,weight_decay=0.0001)
    type: SGD
    kwargs:
      lr: 0.4
      nesterov: true
      momentum: 0.9
      weight_decay: 0
  lr_scheduler:
    warmup_iter: 0
    warmup_type: linear
    warmup_register_type: no_scale_lr
    warmup_ratio: 0
    type: CosineAnnealingLR
    kwargs:
      T_max: 180
      eta_min: 0.0
      warmup_iter: 0

saver: # Required.
  save_dir: res18_kd_tricks_1/checkpoints/cls_std     # dir to save checkpoints
  pretrain_model: pretrain_path
  results_dir: res18_kd_tricks_1/results_dir/cls_std  # dir to save detection results. i.e., bboxes, masks, keypoints
  auto_resume: true  # find last checkpoint from save_dir and resume from it automatically
                     # this option has the highest priority (auto_resume > opts > resume_model > pretrain_model)

hooks:
- type: auto_save_best

net:
- name: backbone                # backbone = resnet50(frozen_layers, out_layers, out_strides)
  type: resnet18
  kwargs:
    frozen_layers: []
    out_layers: [4]       # layer1...4, commonly named Conv2...5
    out_strides: [32]    # tell the strides of output features
    normalize:
      type: solo_bn
    initializer:
      method: msra
- name: head
  type: base_cls_head
  kwargs:
    num_classes: *num_classes
    in_plane: &head_out_channel 512
    input_feature_idx: -1
- name: post_process
  type: base_cls_postprocess
  kwargs:
    cls_loss:
      type: label_smooth_ce
      kwargs:
        smooth_ratio: 0.1
        num_classes: *num_classes

teacher:
- name: backbone                # backbone = resnet50(frozen_layers, out_layers, out_strides)
  type: resnet152
  kwargs:
    frozen_layers: []
    out_layers: [4]       # layer1...4, commonly named Conv2...5
    out_strides: [32]    # tell the strides of output features
    normalize:
      type: solo_bn
    initializer:
      method: msra
    deep_stem: true
    avg_down: true
- name: head
  type: base_cls_head
  kwargs:
    num_classes: *num_classes
    in_plane: &teacher_out_channel 2048
    input_feature_idx: -1
mimic:
  mimic_ins_type: base
  loss_weight: 1.0
  warm_up_iters: -1
  cfgs:
    loss:
      type: kl_loss
      kwargs:
        loss_weight: 1.0
  teacher:
    mimic_name: [head.classifier]
    teacher_weight: teacher.pth.tar
  student:
    mimic_name: [head.classifier]

runtime:
  runner:
    type: kd
  task_names: kd_cls
