num_classes: &num_classes 19
runtime:
  task_names: seg
seg_rand_resize: &seg_rand_resize
  type: seg_rand_resize
  kwargs:
    scale: [0.5, 2.0]

seg_resize: &seg_resize
  type: seg_resize
  kwargs:
    size: [2048, 1024]

seg_crop_train: &seg_crop_train
  type: seg_crop
  kwargs:
    size: [1024, 1024]
    crop_type: rand

seg_flip: &flip
  type: seg_random_flip

color_jitter: &color_jitter
  type: color_jitter_mmseg
  kwargs:
    color_type: &color_type RGB

to_tensor: &to_tensor
  type: custom_to_tensor

normalize: &normalize
  type: normalize
  kwargs:
    mean: [123.675, 116.28, 103.53] # ImageNet pretrained statics
    std: [58.395, 57.12, 57.375]

dataset: # Required.
  train:
    dataset:
      type: seg
      kwargs:
        meta_file: cityscapes/fine_train.txt
        image_reader:
          type: fs_opencv
          kwargs:
            image_dir: cityscapes
            color_mode: *color_type
        seg_label_reader:
          type: fs_opencv
          kwargs:
            image_dir: cityscapes
            color_mode: GRAY
        transformer: [*seg_rand_resize, *flip, *seg_crop_train, *color_jitter, *to_tensor,
          *normalize]
        num_classes: *num_classes
        ignore_label: 255
    batch_sampler:
      type: base
      kwargs:
        sampler:
          type: dist
          kwargs: {}
        batch_size: 1
    dataloader:
      type: seg_base
      kwargs:
        num_workers: 4
        pin_memory: true
  test:
    dataset:
      type: seg
      kwargs:
        meta_file: cityscapes/fine_val.txt
        image_reader:
          type: fs_opencv
          kwargs:
            image_dir: cityscapes
            color_mode: *color_type
                                     # RGB
        seg_label_reader:
          type: fs_opencv
          kwargs:
            image_dir: cityscapes
            color_mode: GRAY
        transformer: [*seg_resize, *to_tensor, *normalize]
        num_classes: *num_classes
        ignore_label: 255
        evaluator:
          type: seg               # choices = {'COCO', 'VOC', 'MR'}
    batch_sampler:
      type: base
      kwargs:
        sampler:
          type: dist
          kwargs: {}
        batch_size: 1
    dataloader:
      type: seg_base
      kwargs:
        num_workers: 2
        pin_memory: false

trainer: # Required.
  max_iter: &max_iter 160000
  test_freq: 5
  save_freq: 1
  only_save_latest: true
  optimizer:
    register_type: segformer
    type: AdamW
    kwargs:
      lr: 0.0000075
      betas: !!python/tuple [0.9, 0.999]
      weight_decay: 0.01
    special_param_group: [{key: decoder, lr: 0.000075, weight_decay: 0.01}, {key: norm,
        lr: 0.0000075, weight_decay: 0.0}]
  lr_scheduler:
    warmup_iter: 1500          # 1000 iterations of warmup
    warmup_type: linear
    warmup_ratio: 0.000001
    type: polylr
    kwargs:
      power: 1.0
      max_iter: *max_iter

saver: # Required.
  save_dir: checkpoints/segformer_b0    # dir to save checkpoints
  results_dir: results_dir/segformer_b0  # dir to save detection results. i.e., bboxes, masks, keypoints
  pretrain_model: mit_b0_cvt.pth  # pretrained/convert_weight.pth
  auto_resume: true  # find last checkpoint from save_dir and resume from it automatically
                     # this option has the highest priority (auto_resume > opts > resume_model > pretrain_model)

hooks:
- type: auto_save_best

net:
- name: encoder                # backbone = resnet50(frozen_layers, out_layers, out_strides)
  type: mit_b0
  kwargs:
    in_channels: 3
    num_stages: 4
    patch_sizes: [7, 3, 3, 3]
    sr_ratios: [8, 4, 2, 1]
    out_indices: !!python/tuple [0, 1, 2, 3]
    mlp_ratio: 4
    qkv_bias: true
    drop_rate: 0.0
    attn_drop_rate: 0.0
    drop_path_rate: 0.1
- name: decoder
  type: segformer_decoder
  kwargs:
    in_channels: [32, 64, 160, 256]
    in_index: [0, 1, 2, 3]
    channels: 256
    dropout_ratio: 0.1
    num_classes: *num_classes
    norm_cfg:
      type: pt_sync_bn
      kwargs:
        group_size: 8
    align_corners: false
    loss:
      type: seg_ce
      kwargs:
        loss_weight: 1.0
