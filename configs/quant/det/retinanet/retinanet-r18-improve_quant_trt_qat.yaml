num_classes: &num_classes 81

runtime:
  rank_init: true
  runner:
    type: quant
  task_names: quant_det
quant:
  quant_type: qat
  deploy_backend: tensorrt
  cali_batch_size: 900
  prepare_args:
    extra_qconfig_dict:
      w_observer: MinMaxObserver
      a_observer: EMAMinMaxObserver
      w_fakequantize: FixedFakeQuantize
      a_fakequantize: FixedFakeQuantize
    leaf_module: [Space2Depth, FrozenBatchNorm2d]
    extra_quantizer_dict:
      additional_module_type: [ConvFreezebn2d, ConvFreezebnReLU2d]


flip: &flip
  type: flip
  kwargs:
    flip_p: 0.5

train_resize:
  type: keep_ar_resize
  kwargs:
    scales: [640, 672, 704, 736, 768, 800]
    max_size: 1333
    separate_wh: true

test_resize: &test_resize
  type: keep_ar_resize
  kwargs:
    scales: [800]
    max_size: 1333
    separate_wh: true

fix_output_resize: &fix_output_resize
  type: fix_output_resize
  kwargs:
    scales: [1024, 1024]
    max_size: 1400

expand: &stitch_expand
  type: stitch_expand
  kwargs:
    expand_ratios: 2.0
    expand_prob: 0.5

crop: &crop
  type: crop
  kwargs:
    means: [123.675, 116.280, 103.530]
    scale: 1024
    crop_prob: 0.5

color_jitter: &color_jitter
  type: color_jitter
  kwargs:
    brightness: 32
    contrast: [0.5, 1.5]
    saturation: [0.5, 1.5]
    hue: 18

to_tensor: &to_tensor
  type: to_tensor

normalize: &normalize
  type: normalize
  kwargs:
    mean: [0.485, 0.456, 0.406] # ImageNet pretrained statics
    std: [0.229, 0.224, 0.225]

dataset: # Required.
  train:
    dataset:
      type: coco
      kwargs:
        meta_file: coco/annotations/instances_train2017.json
        image_reader:
          type: fs_opencv
          kwargs:
            image_dir: coco/train2017
            color_mode: RGB
        transformer: [*stitch_expand, *crop, *flip, *color_jitter, *fix_output_resize,
          *to_tensor, *normalize]
  test:
    dataset:
      type: coco
      kwargs:
        meta_file: coco/annotations/instances_val2017.json
        image_reader:
          type: fs_opencv
          kwargs:
            image_dir: coco/val2017
            color_mode: RGB
        transformer: [*test_resize, *to_tensor, *normalize]
        evaluator:
          type: COCO               # choices = {'COCO', 'VOC', 'MR'}
          kwargs:
            gt_file: coco/annotations/instances_val2017.json
            iou_types: [bbox]
  batch_sampler:
    type: aspect_ratio_group
    kwargs:
      sampler:
        type: dist
        kwargs: {}
      batch_size: 8
      aspect_grouping: [1]
  dataloader:
    type: base
    kwargs:
      num_workers: 4
      alignment: 32
      pin_memory: true


trainer: # Required.
  max_epoch: 6             # total epochs for the training
  test_freq: 1
  save_freq: 1
  optimizer:                 # optimizer = SGD(params,lr=0.001,momentum=0.9,weight_decay=0.0001)
    type: SGD
    kwargs:
      lr: 0.00000625
      momentum: 0.9
      weight_decay: 0.0
  lr_scheduler:              # lr_scheduler = MultStepLR(optimizer, milestones=[9,14],gamma=0.1)
    warmup_epochs: 0        # set to be 0 to disable warmup. When warmup,  target_lr = init_lr * total_batch_size
    warmup_type: linear
    warmup_ratio: 0.001
    type: MultiStepLR
    kwargs:
      milestones: [2, 4]     # epochs to decay lr
      gamma: 0.1             # decay rate

saver: # Required.
  save_dir: checkpoints/retinanet-r18-improve_quant_trt    # dir to save checkpoints
  resume_model: resume_path
  results_dir: results_dir/retinanet-r18-improve_quant_trt  # dir to save detection results. i.e., bboxes, masks, keypoints
  auto_resume: false  # find last checkpoint from save_dir and resume from it automatically
                     # this option has the highest priority (auto_resume > opts > resume_model > pretrain_model)


hooks:
- type: auto_checkpoint

net:
- name: backbone                # backbone = resnet50(frozen_layers, out_layers, out_strides)
  type: resnet18
  kwargs:
    frozen_layers: [0, 1]      # layer0...1 is fixed
    out_layers: [2, 3, 4]       # layer1...4, commonly named Conv2...5
    out_strides: [8, 16, 32]    # tell the strides of output features
    normalize:
      type: mqbench_freeze_bn
    initializer:
      method: msra
- name: neck
  prev: backbone
  type: FPN
  kwargs:
    outplanes: 256
    start_level: 3
    num_level: 5                  # if num_level>len(backbone.out_layers), additional conv with be stacked.
    out_strides: [8, 16, 32, 64, 128] # strides of output features. aka., anchor strides for roi_head
    downsample: conv              # method to downsample, for FPN, it's pool, for RetienaNet, it's conv
    upsample: nearest             # method to interp, nearest or bilinear
    initializer:
      method: xavier
    normalize:
      type: mqbench_freeze_bn
- name: roi_head
  prev: neck
  type: RetinaHeadWithBNSep
  kwargs:
    feat_planes: 256          # channels of intermediate conv
    num_classes: *num_classes
                                  # number of classes including backgroudn. for rpn, it's 2; for RetinaNet, it's 81
    initializer:
      method: normal
      std: 0.01
    init_prior: 0.01
    num_anchors: 2
    num_level: 5
    class_activation: sigmoid
    normalize:
      type: mqbench_freeze_bn
- name: post_process
  prev: roi_head
  type: retina_post
  kwargs:
    num_classes: *num_classes
                                  # number of classes including backgroudn. for rpn, it's 2; for RetinaNet, it's 81
    cfg:
      cls_loss:
        type: quality_focal_loss
        kwargs:
          gamma: 2.0
      loc_loss:
        type: iou_loss
        kwargs:
          loss_type: giou
          loss_weight: 1.0
      anchor_generator:
        type: hand_craft
        kwargs:
          anchor_ratios: [1]    # anchor strides are provided as feature strides by feature extractor
          anchor_scales: [6, 8]   # scale of anchors relative to feature map
      roi_supervisor:
        type: atss
        kwargs:
          top_n: 18
      roi_predictor:
        type: base
        kwargs:
          pre_nms_score_thresh: 0.05    # to reduce computation
          pre_nms_top_n: 1000
          post_nms_top_n: 1000
          roi_min_size: 0                 # minimum scale of a valid roi
          merger:
            type: retina
            kwargs:
              top_n: 100
              nms:
                type: naive
                nms_iou_thresh: 0.5
