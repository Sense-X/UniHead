num_classes: &num_classes 81
runtime:
  aligned: true
    # async_norm: True
  special_bn_init: true
  task_names: quant_det
  runner:
    type: quant

quant:
  quant_type: qat
  deploy_backend: tensorrt
  cali_batch_size: 900
  prepare_args:
    extra_qconfig_dict:
      w_observer: MinMaxObserver
      a_observer: EMAMinMaxObserver
      w_fakequantize: FixedFakeQuantize
      a_fakequantize: FixedFakeQuantize
    leaf_module: [Space2Depth, FrozenBatchNorm2d]
    extra_quantizer_dict:
      additional_module_type: [ConvFreezebn2d, ConvFreezebnReLU2d]


mixup:
  type: yolox_mixup_cv2
  kwargs:
    extra_input: true
    input_size: [640, 640]
    mixup_scale: [0.8, 1.6]
    fill_color: 0

mosaic:
  type: mosaic
  kwargs:
    extra_input: true
    tar_size: 640
    fill_color: 0

random_perspective:
  type: random_perspective_yolox
  kwargs:
    degrees: 10.0 # 0.0
    translate: 0.1
    scale: [0.1, 2.0] # 0.5
    shear: 2.0 # 0.0
    perspective: 0.0
    fill_color: 0  # 0
    border: [-320, -320]

augment_hsv:
  type: augment_hsv
  kwargs:
    hgain: 0.015
    sgain: 0.7
    vgain: 0.4
    color_mode: BGR

flip:
  type: flip
  kwargs:
    flip_p: 0.5

to_tensor: &to_tensor
  type: custom_to_tensor

train_resize: &train_resize
  type: keep_ar_resize_max
  kwargs:
    random_size: [15, 25]
    scale_step: 32
    padding_type: left_top
    padding_val: 0

test_resize: &test_resize
  type: keep_ar_resize_max
  kwargs:
    max_size: 640
    padding_type: left_top
    padding_val: 0

dataset:
  train:
    dataset:
      type: coco
      kwargs:
        meta_file: coco/annotations/instances_train2017.json
        image_reader:
          type: fs_opencv
          kwargs:
            image_dir: coco/train2017
            color_mode: BGR
        transformer: [*train_resize, *to_tensor]
    batch_sampler:
      type: base
      kwargs:
        sampler:
          type: dist
          kwargs: {}
        batch_size: 8
  test:
    dataset:
      type: coco
      kwargs:
        meta_file: coco/annotations/instances_val2017.json
        image_reader:
          type: fs_opencv
          kwargs:
            image_dir: coco/val2017
            color_mode: BGR
        transformer: [*test_resize, *to_tensor]
        evaluator:
          type: COCO
          kwargs:
            gt_file: coco/annotations/instances_val2017.json
            iou_types: [bbox]
    batch_sampler:
      type: base
      kwargs:
        sampler:
          type: dist
          kwargs: {}
        batch_size: 8
  dataloader:
    type: base
    kwargs:
      num_workers: 8
      alignment: 32
      worker_init: true
      pad_type: batch_pad

trainer: # Required.
  max_epoch: &max_epoch 6             # total epochs for the training
  save_freq: 1
  test_freq: 1
  only_save_latest: false
  optimizer:                 # optimizer = SGD(params,lr=0.01,momentum=0.937,weight_decay=0.0005)
    register_type: yolov5
    type: SGD
    kwargs:
      lr: 0.0000003125
      momentum: 0.9
      nesterov: true
      weight_decay: 0.0      # weight_decay = 0.0005 * batch_szie / 64
  lr_scheduler:              # lr_scheduler = MultStepLR(optimizer, milestones=[9,14],gamma=0.1)
    warmup_epochs: 0        # set to be 0 to disable warmup. When warmup,  target_lr = init_lr * total_batch_size
    warmup_type: linear
    warmup_ratio: 0.001
    type: MultiStepLR
    kwargs:
      milestones: [2, 4]     # epochs to decay lr
      gamma: 0.1             # decay rate

saver:
  save_dir: checkpoints/yolox_s_ret_a1_comloc_quant_trt
  results_dir: results_dir/yolox_s_ret_a1_comloc_quant_trt
  resume_model: resume_path
  auto_resume: false



ema:
  enable: false
  ema_type: exp
  kwargs:
    decay: 0.9998

net:
- name: backbone
  type: yolox_s
  kwargs:
    out_layers: [2, 3, 4]
    out_strides: [8, 16, 32]
    normalize: {type: mqbench_freeze_bn}
    act_fn: {type: Silu}
- name: neck
  prev: backbone
  type: YoloxPAFPN
  kwargs:
    depth: 0.33
    out_strides: [8, 16, 32]
    normalize: {type: mqbench_freeze_bn}
    act_fn: {type: Silu}
- name: roi_head
  prev: neck
  type: YoloXHead
  kwargs:
    num_classes: *num_classes
    width: 0.5
    num_point: &dense_points 1
    normalize: {type: mqbench_freeze_bn}
    act_fn: {type: Silu}
- name: post_process
  prev: roi_head
  type: retina_post_iou
  kwargs:
    num_classes: *num_classes
                                  # number of classes including backgroudn. for rpn, it's 2; for RetinaNet, it's 81
    cfg:
      cls_loss:
        type: quality_focal_loss
        kwargs:
          gamma: 2.0
      iou_branch_loss:
        type: sigmoid_cross_entropy
      loc_loss:
        type: compose_loc_loss
        kwargs:
          loss_cfg:
          - type: iou_loss
            kwargs:
              loss_type: giou
              loss_weight: 1.0
          - type: l1_loss
            kwargs:
              loss_weight: 1.0
      anchor_generator:
        type: hand_craft
        kwargs:
          anchor_ratios: [1]    # anchor strides are provided as feature strides by feature extractor
          anchor_scales: [4]   # scale of anchors relative to feature map
      roi_supervisor:
        type: atss
        kwargs:
          top_n: 9
          use_iou: true
      roi_predictor:
        type: base
        kwargs:
          pre_nms_score_thresh: 0.05    # to reduce computation
          pre_nms_top_n: 1000
          post_nms_top_n: 1000
          roi_min_size: 0                 # minimum scale of a valid roi
          merger:
            type: retina
            kwargs:
              top_n: 100
              nms:
                type: naive
                nms_iou_thresh: 0.65
