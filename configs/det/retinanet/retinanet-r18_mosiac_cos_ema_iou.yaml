num_classes: &num_classes 81

runtime:
  rank_init: true
  task_names: det
mixup:
  type: yolox_mixup_cv2
  kwargs:
    extra_input: true
    input_size: [1024, 1024]
    mixup_scale: [0.8, 1.6]
    fill_color: 0

mosaic: &mosaic
  type: mosaic
  kwargs:
    extra_input: true
    tar_size: 1024
    fill_color: 0

random_perspective: &random_perspective
  type: random_perspective_yolox
  kwargs:
    degrees: 10.0 # 0.0
    translate: 0.1
    scale: [0.1, 2.0] # 0.5
    shear: 2.0 # 0.0
    perspective: 0.0
    fill_color: 0  # 0
    border: [-512, -512]

augment_hsv: &augment_hsv
  type: augment_hsv
  kwargs:
    hgain: 0.015
    sgain: 0.7
    vgain: 0.4
    color_mode: BGR

flip: &flip
  type: flip
  kwargs:
    flip_p: 0.5

to_tensor: &to_tensor
  type: to_tensor

normalize: &normalize
  type: normalize
  kwargs:
    mean: [0.485, 0.456, 0.406] # ImageNet pretrained statics
    std: [0.229, 0.224, 0.225]

train_resize: &train_resize
  type: keep_ar_resize_max
  kwargs:
    random_size: [25, 40]
    scale_step: 32

test_resize: &test_resize
  type: keep_ar_resize
  kwargs:
    scales: [800]
    max_size: 1333

dataset:
  train:
    dataset:
      type: coco
      kwargs:
        meta_file: coco/annotations/instances_train2017.json
        image_reader:
          type: fs_opencv
          kwargs:
            image_dir: coco/train2017
            color_mode: RGB
        transformer: [*mosaic, *random_perspective, *augment_hsv, *flip, *train_resize,
          *to_tensor, *normalize]
    batch_sampler:
      type: base
      kwargs:
        sampler:
          type: dist
          kwargs: {}
        batch_size: 8
  test:
    dataset:
      type: coco
      kwargs:
        meta_file: coco/annotations/instances_val2017.json
        image_reader:
          type: fs_opencv
          kwargs:
            image_dir: coco/val2017
            color_mode: RGB
        transformer: [*test_resize, *to_tensor, *normalize]
        evaluator:
          type: COCO
          kwargs:
            gt_file: coco/annotations/instances_val2017.json
            iou_types: [bbox]
    batch_sampler:
      type: base
      kwargs:
        sampler:
          type: dist
          kwargs: {}
        batch_size: 8
  dataloader:
    type: base
    kwargs:
      num_workers: 8
      alignment: 32
      worker_init: true
      pad_type: batch_pad

trainer: # Required.
  max_epoch: &max_epoch 100             # total epochs for the training
  save_freq: 5
  test_freq: 5
  only_save_latest: true
  optimizer:                 # optimizer = SGD(params,lr=0.01,momentum=0.937,weight_decay=0.0005)
    register_type: yolov5
    type: SGD
    kwargs:
      lr: 0.0003125
      momentum: 0.9
      nesterov: true
      weight_decay: 0.0005      # weight_decay = 0.0005 * batch_szie / 64
  lr_scheduler:
    lr_register_type: yolox_base
    warmup_epochs: 1       # set to be 0 to disable warmup. When warmup,  target_lr = init_lr * total_batch_size
    warmup_type: yolox_cos
    type: YoloXCosineLR
    kwargs:
      T_max: *max_epoch
      min_lr_scale: 0.05
      no_aug_epoch: &no_aug_epoch 10

saver:
  save_dir: checkpoints/r18_mosaic
  results_dir: results_dir/r18_mosaic
  pretrain_model: resnet18-5c106cde.pth
  auto_resume: true

hooks:
- type: yolox_noaug
  kwargs:
    no_aug_epoch: *no_aug_epoch
    max_epoch: *max_epoch
    transformer: [*augment_hsv, *flip, *train_resize, *to_tensor, *normalize]
- type: auto_save_best

ema:
  enable: true
  ema_type: exp
  kwargs:
    decay: 0.9998

net:
- name: backbone                # backbone = resnet50(frozen_layers, out_layers, out_strides)
  type: resnet18
  kwargs:
    frozen_layers: [0, 1]      # layer0...1 is fixed
    out_layers: [2, 3, 4]       # layer1...4, commonly named Conv2...5
    out_strides: [8, 16, 32]    # tell the strides of output features
    normalize:
      type: solo_bn
    initializer:
      method: msra
- name: neck
  prev: backbone
  type: FPN
  kwargs:
    outplanes: 256
    start_level: 3
    num_level: 5                  # if num_level>len(backbone.out_layers), additional conv with be stacked.
    out_strides: [8, 16, 32, 64, 128] # strides of output features. aka., anchor strides for roi_head
    downsample: conv              # method to downsample, for FPN, it's pool, for RetienaNet, it's conv
    upsample: nearest             # method to interp, nearest or bilinear
    initializer:
      method: xavier
    normalize:
      type: solo_bn
- name: roi_head
  prev: neck
  type: RetinaHeadWithBNIOU
  kwargs:
    feat_planes: 256          # channels of intermediate conv
    num_classes: *num_classes
                                  # number of classes including backgroudn. for rpn, it's 2; for RetinaNet, it's 81
    initializer:
      method: normal
      std: 0.01
    init_prior: 0.01
    num_anchors: 2
    num_level: 5
    class_activation: sigmoid
    normalize:
      type: solo_bn
- name: post_process
  prev: roi_head
  type: retina_post_iou
  kwargs:
    num_classes: *num_classes
                                  # number of classes including backgroudn. for rpn, it's 2; for RetinaNet, it's 81
    cfg:
      cls_loss:
        type: quality_focal_loss
        kwargs:
          gamma: 2.0
      iou_branch_loss:
        type: sigmoid_cross_entropy
      loc_loss:
        type: compose_loc_loss
        kwargs:
          loss_cfg:
          - type: iou_loss
            kwargs:
              loss_type: giou
              loss_weight: 1.0
          - type: l1_loss
            kwargs:
              loss_weight: 1.0
      anchor_generator:
        type: hand_craft
        kwargs:
          anchor_ratios: [1]    # anchor strides are provided as feature strides by feature extractor
          anchor_scales: [3, 4]   # scale of anchors relative to feature map
      roi_supervisor:
        type: atss
        kwargs:
          top_n: 18
          use_iou: true
      roi_predictor:
        type: base
        kwargs:
          pre_nms_score_thresh: 0.05    # to reduce computation
          pre_nms_top_n: 1000
          post_nms_top_n: 1000
          roi_min_size: 0                 # minimum scale of a valid roi
          merger:
            type: retina
            kwargs:
              top_n: 100
              nms:
                type: naive
                nms_iou_thresh: 0.65
