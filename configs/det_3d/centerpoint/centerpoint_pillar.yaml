num_point_features: &num_point_features 4
class_names: &class_names [Car, Pedestrian, Cyclist]

runtime:
  runner:
    type: point
  task_names: 3d

point_sampling: &point_sampling
  type: point_sampling
  kwargs:
    root_path: kitti_path
    class_names: *class_names
    db_info_paths: kitti/kitti_infos/kitti_dbinfos_train.pkl
    db_info_filters: {filter_by_min_points: [Car:5, Pedestrian:5, Cyclist:5], filter_by_difficulty: [
        -1]}
    sample_groups: [Car:15, Pedestrian:15, Cyclist:15]
    num_point_features: *num_point_features
    database_with_fakelidar: false
    remove_extra_width: [0.0, 0.0, 0.0]
    limit_whole_scene: false
    use_road_plane: true

point_flip: &point_flip
  type: point_flip
  kwargs:
    along_axis_list: [x]

point_rotation: &point_rotation
  type: point_rotation
  kwargs:
    rot_range: [-0.78539816, 0.78539816]

point_scaling: &point_scaling
  type: point_scaling
  kwargs:
    scale_range: [0.95, 1.05]

to_voxel_train: &to_voxel_train
  type: point_to_voxel
  kwargs:
    point_cloud_range: &point_cloud_range [0, -39.68, -3, 69.12, 39.68, 1]
    num_point_features: *num_point_features
    voxel_size: &voxel_size [0.16, 0.16, 4]
    max_points_per_voxel: &max_points_per_voxel 32
    max_number_of_voxels: 16000
    shuffle_enabled: true

to_voxel_test: &to_voxel_test
  type: point_to_voxel
  kwargs:
    point_cloud_range: *point_cloud_range
    num_point_features: *num_point_features
    voxel_size: *voxel_size
    max_points_per_voxel: *max_points_per_voxel
    max_number_of_voxels: 40000
    shuffle_enabled: false

dataset: # Required.
  train:
    dataset:
      type: kitti
      kwargs:
        meta_file: kitti/kitti_infos/kitti_infos_train.pkl
        class_names: *class_names
        get_item_list: &get_item_list [points]
        training: true
        transformer: [*point_sampling, *point_flip, *point_rotation, *point_scaling,
          *to_voxel_train]
        image_reader:
          type: kitti
          kwargs:
            image_dir: kitti/training
            color_mode: None

  test:
    dataset:
      type: kitti
      kwargs:
        meta_file: kitti/kitti_infos/kitti_infos_val.pkl
        class_names: *class_names
        get_item_list: *get_item_list
        training: false
        transformer: [*to_voxel_test]
        image_reader:
          type: kitti
          kwargs:
            image_dir: kitti/training
            color_mode: None
        evaluator:
          type: kitti
          kwargs:
            recall_thresh_list: [0.3, 0.5, 0.7]
            gt_file: kitti/kitti_infos/kitti_infos_val.pkl

  batch_sampler:
    type: base
    kwargs:
      sampler:
        type: dist
        kwargs: {}
      batch_size: 4

  dataloader:
    type: point
    kwargs:
      num_workers: 8
      alignment: 32
      pin_memory: true


trainer: # Required.
  max_epoch: &max_epoch 80             # total epochs for the training
  test_freq: 5
  save_freq: 5
  optimizer:                 # optimizer = SGD(params,lr=0.001,momentum=0.9,weight_decay=0.0001)
    type: AdamW
    kwargs:
      lr: 0.00009375
      betas: [0.9, 0.99]
      weight_decay: 0.01
  lr_scheduler:              # lr_scheduler = MultStepLR(optimizer, milestones=[9,14],gamma=0.1)
    warmup_epochs: 0       # set to be 0 to disable warmup. When warmup,  target_lr = init_lr * total_batch_size
    warmup_type: linear
    warmup_ratio: 0.001
    type: OneCycleLR
    kwargs:
      max_epoch: *max_epoch
      max_lr: 0.003
      pct_start: 0.4
      base_momentum: 0.85
      max_momentum: 0.95
      div_factor: 10

saver: # Required.
  save_dir: checkpoints/centerpoint_pillar    # dir to save checkpoints
  results_dir: results_dir/centerpoint_pillar  # dir to save detection results. i.e., bboxes, masks, keypoints
  auto_resume: true

hooks:
- type: auto_save_best
- type: grad_clipper
  kwargs:
    mode: pre_defined    # specific norm
    norm_type: 2
    max_norm: 10
net:
- name: backbone3d
  type: pillar_vfe
  kwargs:
    num_point_features: *num_point_features
    num_filters: [64]

- name: backbone                # backbone = resnet50(frozen_layers, out_layers, out_strides)
  prev: backbone3d
  type: base_bev
  kwargs:
    layer_nums: [3, 5, 5]
    layer_strides: [2, 2, 2]
    num_filters: [64, 128, 256]
    upsample_strides: [1, 2, 4]
    num_upsample_filters: [128, 128, 128]

- name: roi_head
  prev: backbone
  type: center_head
  kwargs:
    class_names: *class_names
    shared_conv_channel: 64
    num_hm_conv: 2
    sep_head_dict: {center: {out_channels: 2, num_conv: 2}, center_z: {out_channels: 1,
        num_conv: 2}, dim: {out_channels: 3, num_conv: 2}, rot: {out_channels: 2,
        num_conv: 2}}

- name: post_process
  prev: roi_head
  type: center_head_post
  kwargs:
    cfg:
      roi_supervisor:
        type: center_head
        kwargs:
          feature_map_stride: &feature_map_stride 2
          num_max_objs: 500
          gaussian_overlap: 0.1
          min_radius: 2
          gaussian_hm: true
      roi_predictor:
        type: center_head
        kwargs:
          feature_map_stride: *feature_map_stride
          score_thresh: 0.1
          output_raw_score: false
          post_center_limit_range: [-75.2, -75.2, -2, 75.2, 75.2, 4]
          max_obj_per_sample: 500
          cfg:
            multi_classes_nms: false
            nms_type: nms_gpu
            nms_thresh: 0.7
            nms_pre_maxsize: 4096
            nms_post_maxsize: 500
      hm_loss:
        type: center_focal_loss
        kwargs:
          loss_weight: 1.0
      loc_loss:
        type: l1_loss
        kwargs:
          loss_weight: 1.0
          code_weights: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
